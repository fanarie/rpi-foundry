---
- name: create foundry folders infrastruture
  file:
    path:                           "/opt/foundry_v{{ major_version }}"
    state:                          directory
    owner:                          "foundry"
    group:                          "foundry"
    mode:                           '755'
  vars:
    major_version:                  "{{ foundry.version.split('.')[0] }}"
  become:                           true
  notify:
    - restart foundry-vtt
    
- name: extract provided foundry archive
  unarchive:
    src:                            "FoundryVTT-{{ version }}.zip"
    dest:                           "/opt/foundry_v{{ major_version }}"
    owner:                          "foundry"
    group:                          "foundry"
    mode:                           "u=rwX,g=rX,a=rX"
  vars:
    version:                        "{{ foundry.version }}"
    major_version:                  "{{ foundry.version.split('.')[0] }}"
  become:                           true
  notify:
    - restart foundry-vtt
    
- name: create foundry userdata folders
  file:
    path:                           "/home/foundry/userdata_v{{ major_version }}"
    state:                          directory
    owner:                          "foundry"
    group:                          "foundry"
    mode:                           '750'
  vars:
    major_version:                  "{{ foundry.version.split('.')[0] }}"
  become:                           true
  notify:
    - restart foundry-vtt
    
- name: create foundry userdata subfolders
  file:
    path:                           "/home/foundry/userdata_v{{ major_version }}/{{ item }}"
    state:                          directory
    owner:                          "foundry"
    group:                          "foundry"
    mode:                           '750'
  vars:
    major_version:                  "{{ foundry.version.split('.')[0] }}"
  with_items:
    - "Config"
    - "Data"
    - "Logs"
  become:                           true
  notify:
    - restart foundry-vtt
    
- name: deploy userdata foundry vtt config template
  template:
    src:                            "config.json.j2"
    dest:                           "/home/foundry/userdata_v{{ major_version }}/Config/config.json"
    owner:                          "foundry"
    group:                          "foundry"
    mode:                           '640'
  register:                         foundry_vtt_config
  vars:
    major_version:                  "{{ foundry.version.split('.')[0] }}"
  become:                           true
  notify:
    - restart foundry-vtt
    
- name: deploy foundry VTT SystemD template
  template:
    src:                            "foundry-vtt.service.j2"
    dest:                           "/etc/systemd/system/foundry-vtt_v{{ major_version }}.service"
    owner:                          "root"
    group:                          "root"
    mode:                           '644'
  register:                         foundry_vtt_service
  vars:
    major_version:                  "{{ foundry.version.split('.')[0] }}"
  become:                           true
  notify:
    - restart foundry-vtt
  
- name: Ensures files/generated dir exists on controller
  file: 
      path:                         "files/generated"
      state:                        directory
  delegate_to:                      localhost
  
- name: Generate local private key (2048 bits, RSA)
  openssl_privatekey:
    path:                           "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.key"
    type:                           RSA
    size:                           2048
  delegate_to:                      localhost
  
- name: Generate local csr
  openssl_csr:
    path:                           "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.csr"
    privatekey_path:                "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.key"
    common_name:                    "{{ certificates.authority.common_name }}"
    state_or_province_name:         "{{ certificates.authority.state }}"
    organization_name:              "{{ certificates.authority.organization }}"
    organizational_unit_name:       "{{ certificates.authority.organizational_unit }}"
    useCommonNameForSAN:            false
    basicConstraints:
    - CA:TRUE
  delegate_to:                      localhost
  
- name: Generate local Self Signed Certificate Authority
  openssl_certificate:
    path:                           "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.crt"
    csr_path:                       "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.csr"
    privatekey_path:                "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.key"
    provider:                       "selfsigned"
    selfsigned_digest:              "sha256"
  delegate_to:                      localhost
  
- name: Generate local private key
  openssl_privatekey:
    path:                           "files/generated/{{ certificates.server.name    | default(certificates.server.common_name)    }}.key"
    type:                           RSA
    size:                           2048
  delegate_to:                      localhost
  
- name: Generate local csr
  openssl_csr:
    path:                           "files/generated/{{ certificates.server.name    | default(certificates.server.common_name)    }}.csr"
    privatekey_path:                "files/generated/{{ certificates.server.name    | default(certificates.server.common_name)    }}.key"
    common_name:                    "{{ certificates.server.common_name }}"
    state_or_province_name:         "{{ certificates.authority.state }}"
    organization_name:              "{{ certificates.authority.organization }}"
    organizational_unit_name:       "{{ certificates.authority.organizational_unit }}"
    useCommonNameForSAN:            false
    basicConstraints:
    - CA:FALSE
    extended_key_usage:
    - serverAuth
    subject_alt_name:               "{{ certificates.server.subject_atl_names       | default([]) }}"
  delegate_to:                      localhost
  
- name: Generate local certificate signed with own CA
  openssl_certificate:
    path:                           "files/generated/{{ certificates.server.name    | default(certificates.server.common_name)    }}.crt"
    csr_path:                       "files/generated/{{ certificates.server.name    | default(certificates.server.common_name)    }}.csr"
    ownca_path:                     "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.crt"
    ownca_privatekey_path:          "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.key"
    provider:                       ownca
  delegate_to:                      localhost
  
- name: Generate local private key for clients
  openssl_privatekey:
    path:                           "files/generated/{{ item }}.key"
    type:                           RSA
    size:                           2048
  delegate_to:                      localhost
  with_items:                       "{{ certificates.clients }}"
  
- name: Generate local csr for clients
  openssl_csr:
    path:                           "files/generated/{{ item }}.csr"
    privatekey_path:                "files/generated/{{ item }}.key"
    common_name:                    "{{ item }}"
    state_or_province_name:         "{{ certificates.authority.state }}"
    organization_name:              "{{ certificates.authority.organization }}"
    organizational_unit_name:       "{{ certificates.authority.organizational_unit }}"
    useCommonNameForSAN:            false
    basicConstraints:
    - CA:FALSE
    extended_key_usage:
    - clientAuth
  delegate_to:                      localhost
  with_items:                       "{{ certificates.clients }}"
  
- name: Generate local certificate signed with own CA
  openssl_certificate:
    path:                           "files/generated/{{ item }}.crt"
    csr_path:                       "files/generated/{{ item }}.csr"
    ownca_path:                     "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.crt"
    ownca_privatekey_path:          "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.key"
    provider:                       ownca
  delegate_to:                      localhost
  with_items:                       "{{ certificates.clients }}"
  
- name: Generate PKCS#12 files
  openssl_pkcs12:
    action:                         export
    path:                           "files/generated/{{ item }}.pfx"
    friendly_name:                  "{{ item }}"
    passphrase:                     "{{ pfx_password }}"
    privatekey_path:                "files/generated/{{ item }}.key"
    certificate_path:               "files/generated/{{ item }}.crt"
    other_certificates_parse_all:   true
    other_certificates:
    - "files/generated/{{ certificates.authority.name | default(certificates.authority.common_name) }}.crt"
    state:                          present
  delegate_to:                      localhost
  with_items:                       "{{ certificates.clients }}"
  
- name: create caddy ssl folder
  file:
    path:                           "/etc/caddy/ssl"
    state:                          directory
    owner:                          "caddy"
    group:                          "caddy"
    mode:                           '750'
  register:                         caddy_ssl_folder
  become:                           true
  notify:
    - restart caddy
    
- name: copy caddy ssl certificates and keys
  copy:
    src:                            "generated/{{ item }}"
    dest:                           "/etc/caddy/ssl/"
    owner:                          "caddy"
    group:                          "caddy"
    mode:                           '640'
  register:                         caddy_ssl_files
  with_items:
  - "{{ certificates.authority.name | default(certificates.authority.common_name) }}.crt"
  - "{{ certificates.server.name    | default(certificates.server.common_name)    }}.crt"
  - "{{ certificates.server.name    | default(certificates.server.common_name)    }}.key"
  become:                       true
  notify:
    - restart caddy
    
- name: copy caddy ssl certificates and keys
  copy:
    src:                            "generated/{{ item }}.crt"
    dest:                           "/etc/caddy/ssl/"
    owner:                          "caddy"
    group:                          "caddy"
    mode:                           '640'
  register:                         caddy_ssl_files
  with_items:                       "{{ certificates.clients }}"
  become:                           true
  notify:
    - restart caddy
    
- name: set caddy_internal_hosts fact
  set_fact:
    caddy_internal_hosts:
    - host:                         "*.{{ domain_name }}:{{ foundry.ports.internal }}"
      reverse_proxy:                "localhost:{{ foundry.ports.local }}"
      ssl:
        cacert:                     "{{ certificates.authority.name | default(certificates.authority.common_name)   }}.crt"
        crt:                        "{{ certificates.server.name    | default(certificates.server.common_name)      }}.crt"
        key:                        "{{ certificates.server.name    | default(certificates.server.common_name)      }}.key"
  
- name: set caddy_external_hosts fact
  set_fact:
    caddy_external_hosts:
    - host:                         "{{ external_hosts | product    ([ ':' + foundry.ports.external | string ]) | map('join') | list | join(', ') }}"
      reverse_proxy:                "localhost:{{ foundry.ports.local }}"
      ssl:
        cacert:                     "{{ certificates.authority.name | default(certificates.authority.common_name)   }}.crt"
        crt:                        "{{ certificates.server.name    | default(certificates.server.common_name)      }}.crt"
        key:                        "{{ certificates.server.name    | default(certificates.server.common_name)      }}.key"
        client_certs:               "{{ certificates.clients        | default([]) | product( [ '.crt' ] ) | map('join') | list }}"
  when:                             
  - external_hosts                  is defined
  - external_hosts  | length        > 0
  
- name: deploy caddy template
  template:
    src:                            "Caddyfile.j2"
    dest:                           "/etc/caddy/Caddyfile"
    owner:                          "caddy"
    group:                          "caddy"
    mode:                           '644'
  register:                         caddy_config
  vars:
    caddy_hosts:                    "{{ ( caddy_internal_hosts + caddy_external_hosts | default([]) ) }}"
  become:                           true
  notify:
    - restart caddy
  
- name: enable caddy service
  systemd:
    name:                           "caddy.service"
    enabled:                        "{{ foundry.autostart | default(true) }}"
    daemon_reload:                  true
    masked:                         false
  become:                           true
  
- name: enable foundryVTT service
  systemd:
    name:                           "foundry-vtt_v{{ major_version }}.service"
    enabled:                        "{{ foundry.autostart | default(true) }}"
    daemon_reload:                  true
    masked:                         false
  vars:
    major_version:                  "{{ foundry.version.split('.')[0] }}"
  become:                           true
  
- name: start caddy service
  systemd:
    name:                           "caddy.service"
    state:                          "{% if foundry.autostart | default(true) %}started{% else %}stopped{% endif %}"
  register:                         caddy_start
  become:                           true
  
- name: start foundry VTT service for current version
  systemd:
    name:                           "foundry-vtt_v{{ major_version }}.service"
    state:                          "{% if foundry.autostart | default(true) %}started{% else %}stopped{% endif %}"
  vars:
    major_version:                  "{{ foundry.version.split('.')[0] }}"
  register:                         foundryvtt_start
  become:                           true
  