---
- name: Ensures files/generated dir exists on controller
  ansible.builtin.file:
    path: "files/generated"
    state: directory
    mode: '755'
  delegate_to: localhost

- name: Generate local private key (2048 bits, RSA)
  community.crypto.openssl_privatekey:
    path: "files/generated/{{ caddy.certificates.authority.name\
         \ | default(caddy.certificates.authority.common_name) }}.key"
    type: RSA
    size: 2048
  delegate_to: localhost

- name: Generate local csr
  community.crypto.openssl_csr:
    path: "files/generated/{{ caddy.certificates.authority.name\
         \ | default(caddy.certificates.authority.common_name) }}.csr"
    privatekey_path: "files/generated/{{ caddy.certificates.authority.name\
                    \ | default(caddy.certificates.authority.common_name) }}.key"
    common_name: "{{ caddy.certificates.authority.common_name }}"
    state_or_province_name: "{{ caddy.certificates.authority.state }}"
    organization_name: "{{ caddy.certificates.authority.organization }}"
    organizational_unit_name: "{{ caddy.certificates.authority.organizational_unit }}"
    useCommonNameForSAN: false
    basicConstraints:
      - CA:TRUE
  delegate_to: localhost

- name: Generate local Self Signed Certificate Authority
  community.crypto.x509_certificate:
    path: "files/generated/{{ caddy.certificates.authority.name\
         \ | default(caddy.certificates.authority.common_name) }}.crt"
    csr_path: "files/generated/{{ caddy.certificates.authority.name\
             \ | default(caddy.certificates.authority.common_name) }}.csr"
    privatekey_path: "files/generated/{{ caddy.certificates.authority.name\
                    \ | default(caddy.certificates.authority.common_name) }}.key"
    provider: "selfsigned"
    selfsigned_digest: "sha256"
  delegate_to: localhost

- name: Generate local private key
  community.crypto.openssl_privatekey:
    path: "files/generated/{{ caddy.certificates.server.name\
         \ | default(caddy.certificates.server.common_name) }}.key"
    type: RSA
    size: 2048
  delegate_to: localhost

- name: Generate local csr
  community.crypto.openssl_csr:
    path: "files/generated/{{ caddy.certificates.server.name\
         \ | default(caddy.certificates.server.common_name) }}.csr"
    privatekey_path: "files/generated/{{ caddy.certificates.server.name\
                    \ | default(caddy.certificates.server.common_name) }}.key"
    common_name: "{{ caddy.certificates.server.common_name }}"
    state_or_province_name: "{{ caddy.certificates.authority.state }}"
    organization_name: "{{ caddy.certificates.authority.organization }}"
    organizational_unit_name: "{{ caddy.certificates.authority.organizational_unit }}"
    useCommonNameForSAN: false
    basicConstraints:
      - CA:FALSE
    extended_key_usage:
      - serverAuth
    subject_alt_name: "{{ caddy.certificates.server.subject_atl_names | default([]) }}"
  delegate_to: localhost

- name: Generate local certificate signed with own CA
  community.crypto.x509_certificate:
    path: "files/generated/{{ caddy.certificates.server.name\
         \ | default(caddy.certificates.server.common_name) }}.crt"
    csr_path: "files/generated/{{ caddy.certificates.server.name\
             \ | default(caddy.certificates.server.common_name) }}.csr"
    ownca_path: "files/generated/{{ caddy.certificates.authority.name\
               \ | default(caddy.certificates.authority.common_name) }}.crt"
    ownca_privatekey_path: "files/generated/{{ caddy.certificates.authority.name\
                          \ | default(caddy.certificates.authority.common_name) }}.key"
    provider: ownca
  delegate_to: localhost

- name: Generate local private key for clients
  community.crypto.openssl_privatekey:
    path: "files/generated/{{ item }}.key"
    type: RSA
    size: 2048
  delegate_to: localhost
  with_items: "{{ caddy.certificates.clients }}"

- name: Generate local csr for clients
  community.crypto.openssl_csr:
    path: "files/generated/{{ item }}.csr"
    privatekey_path: "files/generated/{{ item }}.key"
    common_name: "{{ item }}"
    state_or_province_name: "{{ caddy.certificates.authority.state }}"
    organization_name: "{{ caddy.certificates.authority.organization }}"
    organizational_unit_name: "{{ caddy.certificates.authority.organizational_unit }}"
    useCommonNameForSAN: false
    basicConstraints:
      - CA:FALSE
    extended_key_usage:
      - clientAuth
  delegate_to: localhost
  with_items: "{{ caddy.certificates.clients }}"

- name: Generate local certificate signed with own CA
  community.crypto.x509_certificate:
    path: "files/generated/{{ item }}.crt"
    csr_path: "files/generated/{{ item }}.csr"
    ownca_path: "files/generated/{{ caddy.certificates.authority.name\
               \ | default(caddy.certificates.authority.common_name) }}.crt"
    ownca_privatekey_path: "files/generated/{{ caddy.certificates.authority.name\
                          \ | default(caddy.certificates.authority.common_name) }}.key"
    provider: ownca
  delegate_to: localhost
  with_items: "{{ caddy.certificates.clients }}"

- name: Generate PKCS#12 files
  community.crypto.openssl_pkcs12:
    action: export
    path: "files/generated/{{ item }}.pfx"
    friendly_name: "{{ item }}"
    passphrase: "{{ pfx_password }}"
    privatekey_path: "files/generated/{{ item }}.key"
    certificate_path: "files/generated/{{ item }}.crt"
    other_certificates_parse_all: true
    other_certificates:
      - "files/generated/{{ caddy.certificates.authority.name\
       \ | default(caddy.certificates.authority.common_name) }}.crt"
    state: present
  delegate_to: localhost
  with_items: "{{ caddy.certificates.clients }}"

- name: Create caddy ssl folder
  ansible.builtin.file:
    path: "/etc/caddy/ssl"
    state: directory
    owner: "caddy"
    group: "caddy"
    mode: '750'
  register: caddy_ssl_folder
  become: true
  notify:
    - Restart caddy

- name: Copy caddy ssl certificates and keys
  ansible.builtin.copy:
    src: "generated/{{ item }}"
    dest: "/etc/caddy/ssl/"
    owner: "caddy"
    group: "caddy"
    mode: '640'
  register: caddy_ssl_files
  with_items:
    - "{{ caddy.certificates.authority.name | default(caddy.certificates.authority.common_name) }}.crt"
    - "{{ caddy.certificates.authority.name | default(caddy.certificates.authority.common_name) }}.crt"
    - "{{ caddy.certificates.server.name | default(caddy.certificates.server.common_name) }}.crt"
    - "{{ caddy.certificates.server.name | default(caddy.certificates.server.common_name) }}.key"
  become: true
  notify:
    - Restart caddy

- name: Copy caddy ssl certificates and keys
  ansible.builtin.copy:
    src: "generated/{{ item }}.crt"
    dest: "/etc/caddy/ssl/"
    owner: "caddy"
    group: "caddy"
    mode: '640'
  register: caddy_ssl_files
  with_items: "{{ caddy.certificates.clients }}"
  become: true
  notify:
    - Restart caddy

- name: Set caddy_internal_hosts fact
  ansible.builtin.set_fact:
    caddy_internal_hosts:
      - name: "foundry"
        hosts: "foundry.{{ domain_name }}:{{ caddy.port }}"
        reverse_proxy: "localhost:{{ foundry.port }}"
        ssl:
          cacert: "{{ caddy.certificates.authority.name | default(caddy.certificates.authority.common_name) }}.crt"
          crt: "{{ caddy.certificates.server.name | default(caddy.certificates.server.common_name) }}.crt"
          key: "{{ caddy.certificates.server.name | default(caddy.certificates.server.common_name) }}.key"
      - name: "homebrewery"
        hosts: "homebrewery.{{ domain_name }}:{{ caddy.port }}"
        reverse_proxy: "localhost:{{ homebrewery.port }}"
        ssl:
          cacert: "{{ caddy.certificates.authority.name | default(caddy.certificates.authority.common_name) }}.crt"
          crt: "{{ caddy.certificates.server.name | default(caddy.certificates.server.common_name) }}.crt"
          key: "{{ caddy.certificates.server.name | default(caddy.certificates.server.common_name) }}.key"

- name: Set caddy_external_hosts fact
  ansible.builtin.set_fact:
    caddy_external_hosts:
      - name: "foundry"
        hosts: "{{ external_hosts | product([':' + caddy.port | string]) | map('join') | list | join(', ') }}"
        reverse_proxy: "localhost:{{ foundry.port }}"
        ssl:
          cacert: "{{ caddy.certificates.authority.name | default(caddy.certificates.authority.common_name) }}.crt"
          crt: "{{ caddy.certificates.server.name | default(caddy.certificates.server.common_name) }}.crt"
          key: "{{ caddy.certificates.server.name | default(caddy.certificates.server.common_name) }}.key"
          client_certs: "{{ caddy.certificates.clients | product(['.crt']) | map('join') | list }}"
  when: external_hosts | default([]) | length > 0

- name: Deploy caddy template
  ansible.builtin.template:
    src: "Caddyfile.j2"
    dest: "/etc/caddy/Caddyfile"
    owner: "caddy"
    group: "caddy"
    mode: '644'
  register: caddy_config
  vars:
    caddy_hosts: "{{ caddy_internal_hosts + caddy_external_hosts if (caddy_external_hosts | default([]) | length > 0) }}"
  become: true
  notify:
    - Restart caddy

- name: Enable caddy service
  ansible.builtin.systemd_service:
    name: "caddy.service"
    enabled: "{{ caddy.autostart | default(autostart) }}"
    daemon_reload: true
    masked: false
  become: true

- name: Start caddy service
  ansible.builtin.systemd_service:
    name: "caddy.service"
    state: "started"
  register: caddy_start
  become: true
